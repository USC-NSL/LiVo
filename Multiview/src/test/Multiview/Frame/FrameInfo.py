# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Frame

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FrameInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrameInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrameInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FrameInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrameInfo
    def FrameNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # FrameInfo
    def ViewNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

def FrameInfoStart(builder): builder.StartObject(2)
def Start(builder):
    return FrameInfoStart(builder)
def FrameInfoAddFrameNumber(builder, frameNumber): builder.PrependInt32Slot(0, frameNumber, -1)
def AddFrameNumber(builder, frameNumber):
    return FrameInfoAddFrameNumber(builder, frameNumber)
def FrameInfoAddViewNumber(builder, viewNumber): builder.PrependInt32Slot(1, viewNumber, -1)
def AddViewNumber(builder, viewNumber):
    return FrameInfoAddViewNumber(builder, viewNumber)
def FrameInfoEnd(builder): return builder.EndObject()
def End(builder):
    return FrameInfoEnd(builder)